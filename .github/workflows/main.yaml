# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "eks" ]
  pull_request:
    branches: [ "eks" ]


env:
  AWS_REGION: eu-west-1                                                            # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 732517461149.dkr.ecr.eu-west-1.amazonaws.com/springboot-example  # set this to your Amazon ECR repository name
  ECS_SERVICE: springboot_svc                                                       # set this to your Amazon ECS service name
  ECS_CLUSTER: springboot-example                                                           # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./springboot-example.json                            # set this to the path to your Amazon ECS task definition - file, e.g. .aws/task-definition.json
  CONTAINER_NAME: springboot-example                                                        # set this to the name of the container in the
                                                                                   # containerDefinitions section of your task definition
jobs:

  build_and_push_image:
    
    name: Build image and push to ECR 
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code from the repo
      uses: actions/checkout@v3
      
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven

    - name: Build project with Maven
      run: mvn -B package --file pom.xml      

    - name: Set outputs
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    - name: Check outputs
      run: echo ${{ steps.vars.outputs.sha_short }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: springboot-example
        IMAGE_TAG: ${{ github.sha }}
        IMAGE_TAG_SHORT: ${{ steps.vars.outputs.sha_short }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHORT .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy_with_helm:

    runs-on: ubuntu-latest
    needs: build_and_push_image

    steps:

    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}    

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: helm deploy
      uses: koslib/helm-eks-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: springboot-example
        IMAGE_TAG: ${{ github.sha }}        
      with:
        #plugins: "https://github.com/jkroepke/helm-secrets" # optional
        command: |
          helm upgrade --install spring-boot-rest-example spring-boot-rest-example --values spring-boot-rest-example/values.yaml --set image=$ECR_REGISTRY/$ECR_REPOSITORY --set tag=$IMAGE_TAG





################ ECS ################

#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
#      with:
#        task-definition: ${{ env.ECS_TASK_DEFINITION }}
#        container-name: ${{ env.CONTAINER_NAME }}
#        image: ${{ steps.build-image.outputs.image }}
#        
#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: ${{ env.ECS_SERVICE }}
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true                                         